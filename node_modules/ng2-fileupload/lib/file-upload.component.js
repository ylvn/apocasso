"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
let FileUpload = class FileUpload {
    constructor() {
        this.onUploadFiles = new core_1.EventEmitter();
        this.reset();
    }
    ngOnInit() {
        this.allowedTypes = (this.allowedTypes && Array.isArray(this.allowedTypes)) ? this.allowedTypes : [];
        this.multiple = (this.multiple) ? this.multiple : false;
    }
    onDragEnter(evt) {
        evt.preventDefault();
        evt.stopPropagation();
        this.status = evt.type;
    }
    onDragOver(evt) {
        evt.preventDefault();
        evt.stopPropagation();
        this.status = evt.type;
    }
    onSelectFiles(evt) {
        evt.preventDefault();
        evt.stopPropagation();
        this.status = evt.type;
        const files = evt.target.files;
        this.uploadFiles(files);
    }
    onDrop(evt) {
        evt.preventDefault();
        evt.stopPropagation();
        this.status = evt.type;
        const files = evt.dataTransfer.files;
        this.uploadFiles(files);
    }
    uploadFiles(files) {
        let error = false;
        const errorMessages = [];
        const data = {
            error: null,
            files: files
        };
        if (this.allowedTypes.length > 0) {
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                if (!this.allowedTypes.includes(file.type)) {
                    error = true;
                    errorMessages.push('Invalid file type(s)');
                }
                if (this.allowedSize && this.allowedSize > 0) {
                    if ((file.size) / 1048576 > this.allowedSize) {
                        error = true;
                        errorMessages.push('Invalid file size(s)');
                    }
                }
            }
        }
        if (error) {
            data.error = errorMessages;
            data.files = null;
        }
        this.onUploadFiles.emit(data);
        this.reset();
    }
    reset() {
        this.status = 'ready';
    }
};
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], FileUpload.prototype, "allowedTypes", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], FileUpload.prototype, "allowedSize", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], FileUpload.prototype, "multiple", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], FileUpload.prototype, "onUploadFiles", void 0);
FileUpload = __decorate([
    core_1.Component({
        selector: 'FileUpload',
        templateUrl: './file-upload.component.html',
        styleUrls: ['./file-upload.component.css']
    }),
    __metadata("design:paramtypes", [])
], FileUpload);
exports.FileUpload = FileUpload;
;
//# sourceMappingURL=file-upload.component.js.map